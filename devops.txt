---------------------------------------------------------------------------git-----------------------------------------------------------------------------------------------------------

initialize:
		git init

clone:
		git clone https://*.*

add all files to git:
		git add .

after adding commit the changes with some description:
		git commit -m "something"

git add our code to our repo:
		git remote add origin https://*.*

push our code to repo:
		git push origin master

mv from one branch to another:
		git checkout some

pull the other repo:
		git pull

view status:
		git status

to see logs:
		git log

to view diff in changes:
		git diff --staged

to remove a file:
		git rm file

to move a file:
		git mv some file

to reset to previous state:
		git reset file

to undo changes:
		git revert ********************(id)

to create branch:
		git branch name

to merge with a branch:
		git merge name

fetch the repo:
		git fetch https://*.*

connect branch with another:
		git rebase branch_name(says connect branch to another)

fork:
 		fork the github repo. 

configuration:
		git config -l
		git config --global user.name "name"
		git config --global user.email "a@gmail.com"


--------------------------------------------------------------jenkins--------------------------------------------------------------------------------------------------

1)download jenkins.
2)install required plugins.
3)Jenkinsfile used to configuration.
			sample file for jenkins:        https://github.com/Nallendhiran/hackme/blob/master/samplejenkinsfile
4)use jenkins databse or file to configure the credentials.

--------------------------------------------------------------docker---------------------------------------------------------------------------------------------------

whole databases===registery
separate file or os or nginx or nodejs ===== images
a one image can used to run multiple container
running instance of an image is called container.


docker --help
docker container create --name=first alpine
docker images
docker images ps -a
docker  images ls
docker images rm {name}
docker rm 
docker images prune -a
docker images history id
docker images inspect name
docker restart container
docker container start --name=some id(or)name
docker container stop id
docker container logs
docker container run -it alpine /bin/sh 
docker container exec -it id  /bin/sh      ---->to run existing container

volume:
docker volume create something
docker run -it alpine --mount source=app_vol,destination=(dest in file) /bin/sh
docker run -it alpine -v (source in docker):(dest in docker) /bin/sh

cpu manage:
docker run -it alpine --cpu-shares=1000 --cpus=1 /bin/bash
docker run -it alpine --memory-reservation=10000m -m 100m --cpus=1 /bin/bash

networking:
types:
	bridge(to access outside),none,host
docker network create {name}
docker run -it alpine --network=bridge
docker run -it alpine --network=bridge -p our_port:container_port

docker compose:(to run multiple containers in single instance)
example:     https://github.com/compose-spec/compose-spec/blob/master/spec.md

install docker-compose
docker-compose filename up(or) --help

Sample:
version: "3.9"
services:
   app:
     image: "httpd:latest"
     ports:
       - 3000:80
       

docker swarm: (to run multiple worker nodes in manager node )
docker swarm init --advertise-addr manager-ip
	-use that token on worker nodes.
docker node --help
docker service ps *
docker network create -d overlay {name}
docker service scale web1=5 (to run or add new 5 replicas)
docker service create --replicas=2 --name some image_name
docker service update --mage some:latest service_name
docker service rollback service_name(go back to previous version)
docker node update --availability  drain name(to empty the container and run all container in other available nodes)

to apply changes:
docker commit id {name}:{tag}
docker run -it {name} /bin/bash


Dockerfile------------

FROM ubuntu:latest
RUN apt-get update
COPY some /some.txt
CMD apachectl -D FOREGROUND

examples_codes:https://www.learnitguide.net/2018/06/dockerfile-explained-with-examples.html
--------------------------------------------------------------------------------kubernetes-----------------------------------------------------------------------------

works like master(api,scheduler,control-manager,etcd(database) and worker(kubelet(used fortalk with master),kube-proxy(used for network).

++++++++++++++++++++++++++++++   swap off fist    ----------------------------------------------

it is a competitor for docker swarm.
used for configuring multiple nodes.
it uses multiple pods in a single node.
in a single pod multiple containers able to create.
cannot able to create multiple container on pod with same image.(eg:httpd)

Installation:  

we need to install kubectl=1.20.0-00,apt-transport-https,curl,kubelet=1.20.0-00,kubeadm=1.20.0-00,docker.io
(curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add .)
no error occurs)sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
 
 start docker.
 
          initialize:
 1)kubeadm  init
 2)kubeadm init --apiserver-advertise-address {ip} --pod-network-cidr=172.16.0.0/16  (for specific ip)
 
 download the prerequestities.
 use the token to configure worker node.
 
 uses:
 kubectl get nodes
 kubectl get pods
 kubectl get svc
 kubectl get deploy
 kubectl describe node {hostname}
 kubectl delete pods {name}
 kubectl apply -f file.yaml
 kubectl edit deploy {name} -o yaml,wide(to output format)
 single file run:  kubectl run httpd --image=httpd --replicas=1 --port=80
 
 
 Even we delete the pods the pods created based on number pf replicas(if we want to stop delete deployment or change the yaml file)
 use apply to make changes.
  
 resouce objects:
 for creating yaml file(for deploy,service,node)
 
 communication types:(works based on service)
 container to container
 pod to pod (intra node(within pod) ,inter node(outside pod))
 pod to service.
 external to service(clusterip(within container),(nodeport(for setting port),loadbalancer(random aws port))(outside container like localhost),extername(external aws access) )
 
 service port(port(to access),targetport(in container port),nodeport(outside-access))
-------------------------------------------------------------------------ansible---------------------------------------------------------------------------------------

configuration management

use .yml file to access the code

https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/11/Ansible-Cheat_Sheet_Edureka.png               --cheatsheet

playbook sample codes:     https://github.com/adithyakhamithkar/ansible-playbooks

------------------------------------------------------------------------------------------selenium---------------------------------------------------------------------

software testing.
